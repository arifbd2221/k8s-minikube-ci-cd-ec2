name: Build and Tag Docker Image

on:
  push:
    branches:
      - main  # Trigger the action on push to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Log in to DockerHub (requires DockerHub credentials stored in GitHub Secrets)
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 3: Run the build.sh script and pass secrets as environment variables
      - name: Build and tag Docker image
        run: ./build.sh
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_NAME: demo-apis  # Optional: hardcode the image name or store it as a secret

      - name: Create SSH Key File
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > /tmp/ssh_key.pem
          chmod 400 /tmp/ssh_key.pem  # Ensure correct permissions
      
      # Step 4: SSH into EC2 and deploy the updated image
      - name: Deploy to Minikube on EC2
        uses: appleboy/ssh-action@v0.1.1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key_path: /tmp/ssh_key.pem  # Use the created key file path
          script: |
            echo "Pulling updated image from DockerHub..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/demo-apis:$(git rev-list --count HEAD)

            echo "Updating Kubernetes deployment with new image..."
            kubectl set image deployment/demo-api-service-deployment demo-apis=${{ secrets.DOCKER_USERNAME }}/demo-apis:$(git rev-list --count HEAD)

            echo "Deployment updated with latest image!"
          
          debug: true
